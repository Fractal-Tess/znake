"use client"

import { useMemo, useState } from "react"
import { ChevronDown, ChevronUp, Search, Settings } from "lucide-react"

import { Badge } from "~/components/ui/badge"
import { Button } from "~/components/ui/button"
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "~/components/ui/card"
import { Checkbox } from "~/components/ui/checkbox"
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuTrigger,
} from "~/components/ui/dropdown-menu"
import { Input } from "~/components/ui/input"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "~/components/ui/table"

type Vulnerability = {
  id: number
  cveId?: string | null
  severity: string
  title: string
  description?: string | null
  packageName?: string | null
  packageVersion?: string | null
  fixedVersion?: string | null
  publishedDate?: string | null
  lastModifiedDate?: string | null
  cvssScore?: number | null
  references?: string | null
}

type VulnerabilityTableClientProps = {
  vulnerabilities: Vulnerability[]
}

type ColumnConfig = {
  id: string
  label: string
  visible: boolean
  width?: string
}

const DEFAULT_COLUMNS: ColumnConfig[] = [
  { id: "severity", label: "Severity", visible: true, width: "w-[80px]" },
  { id: "cveId", label: "CVE ID", visible: true, width: "w-[140px]" },
  { id: "title", label: "Title", visible: true, width: "w-[250px]" },
  { id: "packageName", label: "Package", visible: true, width: "w-[150px]" },
  { id: "packageVersion", label: "Version", visible: true, width: "w-[100px]" },
  {
    id: "fixedVersion",
    label: "Fixed Version",
    visible: true,
    width: "w-[140px]",
  },
  { id: "cvssScore", label: "CVSS", visible: false, width: "w-[70px]" },
  {
    id: "publishedDate",
    label: "Published",
    visible: false,
    width: "w-[120px]",
  },
  {
    id: "lastModifiedDate",
    label: "Modified",
    visible: false,
    width: "w-[120px]",
  },
]

export function VulnerabilityTableClient({
  vulnerabilities,
}: VulnerabilityTableClientProps) {
  const [columnConfig, setColumnConfig] =
    useState<ColumnConfig[]>(DEFAULT_COLUMNS)
  const [showColumnConfig, setShowColumnConfig] = useState(false)
  const [searchQuery, setSearchQuery] = useState("")

  // Fuzzy search function
  const fuzzyMatch = (text: string, query: string): boolean => {
    if (!query) return true
    const textLower = text.toLowerCase()
    const queryLower = query.toLowerCase()

    // Check if all characters in query appear in order in text
    let queryIndex = 0
    for (
      let i = 0;
      i < textLower.length && queryIndex < queryLower.length;
      i++
    ) {
      if (textLower[i] === queryLower[queryIndex]) {
        queryIndex++
      }
    }
    return queryIndex === queryLower.length
  }

  // Sort vulnerabilities by severity and filter by search query
  const filteredAndSortedVulnerabilities = useMemo(() => {
    let filtered = vulnerabilities

    // Apply fuzzy search filter
    if (searchQuery.trim()) {
      filtered = filtered.filter((vuln) => {
        const searchableText = [
          vuln.cveId || "",
          vuln.title || "",
          vuln.description || "",
          vuln.packageName || "",
          vuln.packageVersion || "",
          vuln.fixedVersion || "",
          vuln.severity || "",
        ].join(" ")

        return fuzzyMatch(searchableText, searchQuery)
      })
    }

    // Sort by severity (CRITICAL > HIGH > MEDIUM > LOW > UNKNOWN)
    const severityOrder = {
      CRITICAL: 0,
      HIGH: 1,
      MEDIUM: 2,
      LOW: 3,
      UNKNOWN: 4,
    }

    return filtered.sort((a, b) => {
      const aSeverity =
        severityOrder[a.severity.toUpperCase() as keyof typeof severityOrder] ??
        5
      const bSeverity =
        severityOrder[b.severity.toUpperCase() as keyof typeof severityOrder] ??
        5

      if (aSeverity !== bSeverity) {
        return aSeverity - bSeverity
      }

      // If same severity, sort by CVE ID for consistency
      return (a.cveId || "").localeCompare(b.cveId || "")
    })
  }, [vulnerabilities, searchQuery])

  const getSeverityColor = (severity: string) => {
    switch (severity.toUpperCase()) {
      case "CRITICAL":
        return "bg-red-100 text-red-800 border-red-200"
      case "HIGH":
        return "bg-orange-100 text-orange-800 border-orange-200"
      case "MEDIUM":
        return "bg-yellow-100 text-yellow-800 border-yellow-200"
      case "LOW":
        return "bg-blue-100 text-blue-800 border-blue-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  const formatDate = (dateString: string | null) => {
    if (!dateString) return "N/A"
    try {
      const date = new Date(dateString)
      return date.toLocaleDateString()
    } catch {
      return "N/A"
    }
  }

  const formatCvssScore = (score: number | null) => {
    if (!score) return "N/A"
    return (score / 10).toFixed(1)
  }

  const toggleColumnVisibility = (columnId: string) => {
    setColumnConfig((prev) =>
      prev.map((col) =>
        col.id === columnId ? { ...col, visible: !col.visible } : col
      )
    )
  }

  const visibleColumns = columnConfig.filter((col) => col.visible)

  if (vulnerabilities.length === 0) {
    return null
  }

  if (filteredAndSortedVulnerabilities.length === 0 && searchQuery) {
    return (
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>
                Vulnerabilities (0 of {vulnerabilities.length})
              </CardTitle>
              <CardDescription>
                Security vulnerabilities found in the image
              </CardDescription>
            </div>
          </div>
          <div className="mt-4">
            <div className="relative">
              <Search className="text-muted-foreground absolute top-1/2 left-3 h-4 w-4 -translate-y-1/2" />
              <Input
                className="pl-9"
                placeholder="Search vulnerabilities by CVE, title, package, or description..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col items-center justify-center py-12 text-center">
            <Search className="text-muted-foreground mb-4 h-12 w-12" />
            <h3 className="mb-2 text-lg font-medium">
              No vulnerabilities found
            </h3>
            <p className="text-muted-foreground text-sm">
              No vulnerabilities match your search query "{searchQuery}". Try a
              different search term.
            </p>
            <Button
              variant="outline"
              className="mt-4"
              onClick={() => setSearchQuery("")}
            >
              Clear Search
            </Button>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle>
              Vulnerabilities ({filteredAndSortedVulnerabilities.length}
              {searchQuery && ` of ${vulnerabilities.length}`})
            </CardTitle>
            <CardDescription>
              Security vulnerabilities found in the image
            </CardDescription>
          </div>
          <div className="flex items-center gap-2">
            <DropdownMenu
              open={showColumnConfig}
              onOpenChange={setShowColumnConfig}
            >
              <DropdownMenuTrigger asChild>
                <Button variant="outline" size="sm">
                  <Settings className="mr-2 h-4 w-4" />
                  Columns
                  {showColumnConfig ? (
                    <ChevronUp className="ml-2 h-4 w-4" />
                  ) : (
                    <ChevronDown className="ml-2 h-4 w-4" />
                  )}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-48">
                {columnConfig.map((column) => (
                  <DropdownMenuCheckboxItem
                    key={column.id}
                    checked={column.visible}
                    onCheckedChange={() => toggleColumnVisibility(column.id)}
                  >
                    {column.label}
                  </DropdownMenuCheckboxItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>
        <div className="mt-4">
          <div className="relative">
            <Search className="text-muted-foreground absolute top-1/2 left-3 h-4 w-4 -translate-y-1/2" />
            <Input
              className="pl-9"
              placeholder="Search vulnerabilities by CVE, title, package, or description..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="rounded-md border overflow-x-auto">
          <Table className="table-fixed w-full">
            <TableHeader>
              <TableRow>
                {visibleColumns.map((column) => (
                  <TableHead
                    key={column.id}
                    className={`${column.width} whitespace-nowrap text-left`}
                  >
                    {column.label}
                  </TableHead>
                ))}
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredAndSortedVulnerabilities.map((vuln) => (
                <TableRow key={vuln.id}>
                  {visibleColumns.map((column) => (
                    <TableCell
                      key={column.id}
                      className={`${column.width} align-middle`}
                    >
                      {column.id === "severity" && (
                        <Badge className={getSeverityColor(vuln.severity)}>
                          {vuln.severity}
                        </Badge>
                      )}
                      {column.id === "cveId" &&
                        (vuln.cveId ? (
                          <code className="rounded bg-gray-100 px-2 py-1 text-xs dark:bg-gray-800 break-all">
                            {vuln.cveId}
                          </code>
                        ) : (
                          <span className="text-muted-foreground text-sm">
                            N/A
                          </span>
                        ))}
                      {column.id === "title" && (
                        <div className="break-words">
                          <div className="font-medium break-words line-clamp-3">
                            {vuln.title}
                          </div>
                          {vuln.description && (
                            <div className="text-muted-foreground mt-1 text-sm line-clamp-2 break-words">
                              {vuln.description}
                            </div>
                          )}
                        </div>
                      )}
                      {column.id === "packageName" && (
                        <span className="font-mono text-sm break-all">
                          {vuln.packageName || "N/A"}
                        </span>
                      )}
                      {column.id === "packageVersion" && (
                        <span className="font-mono text-sm break-all">
                          {vuln.packageVersion || "N/A"}
                        </span>
                      )}
                      {column.id === "fixedVersion" &&
                        (vuln.fixedVersion ? (
                          <span className="font-mono text-sm text-green-600 break-all">
                            {vuln.fixedVersion}
                          </span>
                        ) : (
                          <span className="text-muted-foreground text-sm">
                            No fix
                          </span>
                        ))}
                      {column.id === "cvssScore" && (
                        <span className="font-mono text-sm">
                          {formatCvssScore(vuln.cvssScore)}
                        </span>
                      )}
                      {column.id === "publishedDate" && (
                        <span className="text-sm">
                          {formatDate(vuln.publishedDate)}
                        </span>
                      )}
                      {column.id === "lastModifiedDate" && (
                        <span className="text-sm">
                          {formatDate(vuln.lastModifiedDate)}
                        </span>
                      )}
                    </TableCell>
                  ))}
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </CardContent>
    </Card>
  )
}
